// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BasketTests.Features.Basket
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ShoppingBasketAPIFeature : object, Xunit.IClassFixture<ShoppingBasketAPIFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Basket.feature"
#line hidden
        
        public ShoppingBasketAPIFeature(ShoppingBasketAPIFeature.FixtureData fixtureData, BasketTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Basket", "Shopping Basket API", "  In order to amend my purchase before checking out, as a customer, \r\n  I want to" +
                    " be able to edit my shopping basket", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
  #line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Product ID",
                        "Stock Qty",
                        "Basket"});
            table1.AddRow(new string[] {
                        "1",
                        "2",
                        "0"});
            table1.AddRow(new string[] {
                        "2",
                        "0",
                        "0"});
            table1.AddRow(new string[] {
                        "3",
                        "2",
                        "1"});
            table1.AddRow(new string[] {
                        "4",
                        "5",
                        "1"});
#line 6
    testRunner.Given("I have the following data", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Testing functionality of basket api")]
        [Xunit.TraitAttribute("FeatureTitle", "Shopping Basket API")]
        [Xunit.TraitAttribute("Description", "Testing functionality of basket api")]
        [Xunit.InlineDataAttribute("In stock", "1", "1", "1", "\'Added to basket \'", new string[0])]
        [Xunit.InlineDataAttribute("Not in stock", "2", "0", "0", "\'Not in stock\'", new string[0])]
        [Xunit.InlineDataAttribute("Already in basket", "3", "2", "1", "\'Limited to one only\'", new string[0])]
        public void TestingFunctionalityOfBasketApi(string testDescription, string product, string stock, string basket, string message, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Test Description", testDescription);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("Stock", stock);
            argumentsOfScenario.Add("Basket", basket);
            argumentsOfScenario.Add("Message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing functionality of basket api", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
#line 14
    testRunner.Given(string.Format("I have a request to add product {0}", product), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 15
    testRunner.When("I call the Add method of the basket api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Product",
                            "Stock",
                            "Basket"});
                table2.AddRow(new string[] {
                            string.Format("{0}", product),
                            string.Format("{0}", stock),
                            string.Format("{0}", basket)});
#line 16
    testRunner.Then("the quantities are", ((string)(null)), table2, "Then ");
#line hidden
#line 19
    testRunner.And(string.Format("a message {0} is returned to the client", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ShoppingBasketAPIFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ShoppingBasketAPIFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
